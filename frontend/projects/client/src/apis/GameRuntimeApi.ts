/* tslint:disable */
/* eslint-disable */
/**
 * FizzBuzzService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GameRuntimeQueryGameCodeGetRequest {
    gameCode: string;
}

export interface GameRuntimeRunGameCodeGetRequest {
    gameCode: string;
    query?: number;
    response?: string;
}

/**
 * 
 */
export class GameRuntimeApi extends runtime.BaseAPI {

    /**
     */
    async gameRuntimeQueryGameCodeGetRaw(requestParameters: GameRuntimeQueryGameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['gameCode'] == null) {
            throw new runtime.RequiredError(
                'gameCode',
                'Required parameter "gameCode" was null or undefined when calling gameRuntimeQueryGameCodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GameRuntime/Query/{gameCode}`.replace(`{${"gameCode"}}`, encodeURIComponent(String(requestParameters['gameCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async gameRuntimeQueryGameCodeGet(requestParameters: GameRuntimeQueryGameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.gameRuntimeQueryGameCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gameRuntimeRunGameCodeGetRaw(requestParameters: GameRuntimeRunGameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['gameCode'] == null) {
            throw new runtime.RequiredError(
                'gameCode',
                'Required parameter "gameCode" was null or undefined when calling gameRuntimeRunGameCodeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['response'] != null) {
            queryParameters['response'] = requestParameters['response'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/GameRuntime/Run/{gameCode}`.replace(`{${"gameCode"}}`, encodeURIComponent(String(requestParameters['gameCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async gameRuntimeRunGameCodeGet(requestParameters: GameRuntimeRunGameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.gameRuntimeRunGameCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
